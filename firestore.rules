rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // TEMPORARY: fully open rules to unblock development
    // WARNING: This allows anyone to read and write all data. Do NOT use in production.
    match /{document=**} {
      allow read, write: if true;
    }


    // Helper: is signed-in user a ministry account?
    function isMinistryAccount() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isMinistryAccount == true;
    }

    // Helper: the signed-in user's selected ministry name
    function userMinistryName() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.preferences.ministryName;
    }

    // Helper: approved ministry account with a selected ministry
    function isApprovedMinistry() {
      return isMinistryAccount() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.ministryAccess.status == 'approved' &&
        (userMinistryName() != null && userMinistryName() != '');
    }



    function isSuperAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.superAdmin == true;
    }


    // Cross-tenant access: allow if there is an active access index doc for (viewerUid, churchId)
    function hasCrossTenantAccessToChurch(churchId) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/crossTenantAccessIndex/$(request.auth.uid + '_' + churchId)) &&
        get(/databases/$(database)/documents/crossTenantAccessIndex/$(request.auth.uid + '_' + churchId)).data.revoked != true;
    }


    // Ministry mode: treat the user's ministryChurchId context as full access for that church
    function hasMinistryContextForChurch(churchId) {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.contexts.ministryChurchId == churchId;
    }


    // Users can read own doc OR any user in the same church; only self can create/update
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        (resource.data != null && (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId == resource.data.churchId ||
          hasCrossTenantAccessToChurch(resource.data.churchId) ||
          hasMinistryContextForChurch(resource.data.churchId)
        )) ||
        isSuperAdmin()
      );
      allow create, update: if (request.auth != null && request.auth.uid == userId) || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // Church-scoped data
    match /churches/{churchId} {
      function isInChurch() {
        return request.auth != null &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId == churchId;
      }

      // Allow access if user's ministry church context matches this church
      function isInMinistryChurchContext() {
        return request.auth != null &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.contexts.ministryChurchId == churchId;
      }


      allow read: if isApprovedMinistry() || isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin();
      allow write: if isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin();

      // Chat threads â€” participants only
      match /chatThreads/{threadId} {
        function isParticipant() {
          return (isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin()) &&
            request.auth.uid in resource.data.participants;
        }
        function isParticipantOnCreate() {
          return (isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin()) &&
            request.auth.uid in request.resource.data.participants;
        }

        allow read: if isParticipant();
        allow create: if isParticipantOnCreate();
        allow update: if isParticipant();
        allow delete: if isParticipant();

        // Messages: validate against parent thread's participants
        match /messages/{messageId} {
          function isThreadParticipant() {
            return (isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin()) &&
              request.auth.uid in get(/databases/$(database)/documents/churches/$(churchId)/chatThreads/$(threadId)).data.participants;
          }
          allow read: if isThreadParticipant();
          allow create: if isThreadParticipant();
          allow delete: if isThreadParticipant();
        }
      }


	      // Attendance: allow ministry accounts to write attendance for members of their ministry in any church
	      match /attendance/{attId} {
	        function canMinistryWriteAttendance() {
	          return (isMinistryAccount() || isApprovedMinistry()) &&
	            request.resource.data.memberId != null &&
	            exists(/databases/$(database)/documents/churches/$(churchId)/members/$(request.resource.data.memberId)) &&
	            get(/databases/$(database)/documents/churches/$(churchId)/members/$(request.resource.data.memberId)).data.ministry == userMinistryName();
	        }
	        allow read: if isApprovedMinistry() || isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin();
	        allow create: if isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin() || canMinistryWriteAttendance();
	        allow update: if isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin() || (
	          (isMinistryAccount() || isApprovedMinistry()) &&
	          resource.data.memberId != null &&
	          exists(/databases/$(database)/documents/churches/$(churchId)/members/$(resource.data.memberId)) &&
	          get(/databases/$(database)/documents/churches/$(churchId)/members/$(resource.data.memberId)).data.ministry == userMinistryName()
	        );
        allow delete: if isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin() || (
          (isMinistryAccount() || isApprovedMinistry()) &&
          resource.data.memberId != null &&
          exists(/databases/$(database)/documents/churches/$(churchId)/members/$(resource.data.memberId)) &&
          get(/databases/$(database)/documents/churches/$(churchId)/members/$(resource.data.memberId)).data.ministry == userMinistryName()
        );
	      }

      // Other church subcollections: same isInChurch guard
      match /{collection}/{docId} {
        allow read: if isApprovedMinistry() || isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin();
        allow write: if isInChurch() || isInMinistryChurchContext() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin();
      }
    }

    // Root-level special collections
    match /campuses/{campusId} {
      allow read, write: if isSuperAdmin();
    }

    match /ministryAccessRequests/{requestId} {
      // Requester can create and read their own request; SuperAdmin has full access



      allow create: if request.auth != null && request.resource.data.requesterUid == request.auth.uid;
      allow read: if request.auth != null && (resource.data.requesterUid == request.auth.uid || isSuperAdmin());
      allow update, delete: if isSuperAdmin();
    }

    match /superAdminNotifications/{notificationId} {
      allow read, write: if isSuperAdmin();
    }

    // Root-level: Admin invites and cross-tenant links
    match /{rootCollection}/{docId} {
      // Read access
      allow read: if request.auth != null && (
        (rootCollection == 'adminInvites' && (
          resource.data.invitedUserId == request.auth.uid ||
          resource.data.createdBy == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantAccessLinks' && (
          resource.data.viewerUid == request.auth.uid ||
          resource.data.ownerUid == request.auth.uid
        )) ||



        (rootCollection == 'crossTenantInvites' && (
          resource.data.fromAdminUid == request.auth.uid ||
          resource.data.toAdminUid == request.auth.uid
        )) ||
        isSuperAdmin()
      );

      // Create access
      allow create: if request.auth != null && (
        (rootCollection == 'adminInvites' &&
          request.resource.data.createdBy == request.auth.uid) ||
        (rootCollection == 'crossTenantAccessLinks' &&
          request.resource.data.viewerUid == request.auth.uid) ||
        (rootCollection == 'crossTenantInvites' &&
          request.resource.data.fromAdminUid == request.auth.uid) ||
        isSuperAdmin()
      );

      // Update/Delete access
      allow update, delete: if request.auth != null && (
        (rootCollection == 'adminInvites' && (
          resource.data.invitedUserId == request.auth.uid ||
          resource.data.createdBy == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantAccessLinks' && (
          resource.data.viewerUid == request.auth.uid ||
          resource.data.ownerUid == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantInvites' && (
          resource.data.fromAdminUid == request.auth.uid ||
          resource.data.toAdminUid == request.auth.uid
        )) ||
        isSuperAdmin()
      );
    }

    // Collection group rules for ministry aggregation
    // Allows collectionGroup('members') reads when the user has access to the document's church
    match /{path=**}/members/{memberId} {
      allow read: if request.auth != null && (
        // Ministry accounts can read members of their selected ministry across churches
        ((isMinistryAccount() || isApprovedMinistry()) && resource.data.ministry == userMinistryName()) ||
        // Native admin of the same church
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId == resource.data.churchId ||
        // Ministry context or cross-tenant grant for the document's church
        hasMinistryContextForChurch(resource.data.churchId) ||
        hasCrossTenantAccessToChurch(resource.data.churchId) ||
        // Or SuperAdmin
        isSuperAdmin()
      );
    }


    // Dedicated rules for crossTenantAccessIndex to let viewers create their own index doc
    match /crossTenantAccessIndex/{docId} {
      allow read: if request.auth != null && (
        resource.data.viewerUid == request.auth.uid ||
        resource.data.ownerUid == request.auth.uid ||
        isSuperAdmin()
      );
      allow create: if (request.auth != null && request.resource.data.viewerUid == request.auth.uid) || isSuperAdmin();
      allow update, delete: if request.auth != null && (
        resource.data.viewerUid == request.auth.uid ||
        resource.data.ownerUid == request.auth.uid ||
        isSuperAdmin()
      );
    }

  }
}
