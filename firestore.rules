rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read own doc OR any user in the same church; only self can create/update
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId ==
          resource.data.churchId
      );
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Church-scoped data
    match /churches/{churchId} {
      function isInChurch() {
        return request.auth != null &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId == churchId;
      }

      allow read: if isInChurch();
      allow write: if isInChurch();

      // Chat threads â€” participants only
      match /chatThreads/{threadId} {
        function isParticipant() {
          return isInChurch() &&
            request.auth.uid in resource.data.participants;
        }
        function isParticipantOnCreate() {
          return isInChurch() &&
            request.auth.uid in request.resource.data.participants;
        }

        allow read: if isParticipant();
        allow create: if isParticipantOnCreate();
        allow update: if isParticipant();

        // Messages: validate against parent thread's participants
        match /messages/{messageId} {
          function isThreadParticipant() {
            return isInChurch() &&
              request.auth.uid in get(/databases/$(database)/documents/churches/$(churchId)/chatThreads/$(threadId)).data.participants;
          }
          allow read: if isThreadParticipant();
          allow create: if isThreadParticipant();
        }
      }

      // Other church subcollections: same isInChurch guard
      match /{collection}/{docId} {
        allow read, write: if isInChurch();
      }
    }

    // Root-level: Admin invites and cross-tenant links
    match /{rootCollection}/{docId} {
      // Read access
      allow read: if request.auth != null && (
        (rootCollection == 'adminInvites' && (
          resource.data.invitedUserId == request.auth.uid ||
          resource.data.createdBy == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantAccessLinks' && (
          resource.data.viewerUid == request.auth.uid ||
          resource.data.ownerUid == request.auth.uid
        ))
      );

      // Create access
      allow create: if request.auth != null && (
        (rootCollection == 'adminInvites' &&
          request.resource.data.createdBy == request.auth.uid) ||
        (rootCollection == 'crossTenantAccessLinks' &&
          request.resource.data.viewerUid == request.auth.uid)
      );

      // Update/Delete access
      allow update, delete: if request.auth != null && (
        (rootCollection == 'adminInvites' && (
          resource.data.invitedUserId == request.auth.uid ||
          resource.data.createdBy == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantAccessLinks' && (
          resource.data.viewerUid == request.auth.uid ||
          resource.data.ownerUid == request.auth.uid
        ))
      );
    }
  }
}