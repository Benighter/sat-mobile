rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSuperAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.superAdmin == true;
    }

    // DEVELOPMENT ONLY: Allow unauthenticated access to SuperAdmin collections
    // This is for the SuperAdmin prototype mode during development
    // REMOVE THIS IN PRODUCTION and use proper SuperAdmin authentication
    function isDevSuperAdminAccess() {
      return request.auth == null; // Unauthenticated access for dev prototype
    }


    // Cross-tenant access: allow if there is an active access index doc for (viewerUid, churchId)
    function hasCrossTenantAccessToChurch(churchId) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/crossTenantAccessIndex/$(request.auth.uid + '_' + churchId)) &&
        get(/databases/$(database)/documents/crossTenantAccessIndex/$(request.auth.uid + '_' + churchId)).data.revoked != true;
    }



    // Ministry mode: treat the user's ministryChurchId context as full access for that church
    function isInMinistryChurchContext(churchId) {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.contexts.ministryChurchId == churchId;
    }

    // Users can read own doc OR any user in the same church; only self can create/update
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId == resource.data.churchId ||
        hasCrossTenantAccessToChurch(resource.data.churchId) ||
        isInMinistryChurchContext(resource.data.churchId) ||
        isSuperAdmin()
      ) || isDevSuperAdminAccess(); // DEV ONLY
      allow create, update: if request.auth != null && request.auth.uid == userId || isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY
      allow delete: if isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY
    }

    // Church-scoped data
    match /churches/{churchId} {
      function isInChurch() {
        return request.auth != null &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId == churchId;
      }

      allow read: if isInChurch() || hasCrossTenantAccessToChurch(churchId) || isInMinistryChurchContext(churchId) || isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY
      allow write: if isInChurch() || hasCrossTenantAccessToChurch(churchId) || isInMinistryChurchContext(churchId) || isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY

      // Chat threads â€” participants only
      match /chatThreads/{threadId} {
        function isParticipant() {
          return (isInChurch() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin() || isDevSuperAdminAccess()) &&
            request.auth.uid in resource.data.participants;
        }
        function isParticipantOnCreate() {
          return (isInChurch() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin() || isDevSuperAdminAccess()) &&
            request.auth.uid in request.resource.data.participants;
        }

        allow read: if isParticipant() || isDevSuperAdminAccess(); // DEV ONLY
        allow create: if isParticipantOnCreate() || isDevSuperAdminAccess(); // DEV ONLY
        allow update: if isParticipant() || isDevSuperAdminAccess(); // DEV ONLY
        allow delete: if isParticipant() || isDevSuperAdminAccess(); // DEV ONLY

        // Messages: validate against parent thread's participants
        match /messages/{messageId} {
          function isThreadParticipant() {
            return (isInChurch() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin() || isDevSuperAdminAccess()) &&
              request.auth.uid in get(/databases/$(database)/documents/churches/$(churchId)/chatThreads/$(threadId)).data.participants;
          }
          allow read: if isThreadParticipant() || isDevSuperAdminAccess(); // DEV ONLY
          allow create: if isThreadParticipant() || isDevSuperAdminAccess(); // DEV ONLY
          allow delete: if isThreadParticipant() || isDevSuperAdminAccess(); // DEV ONLY
        }
      }

      // Other church subcollections: same isInChurch guard
      match /{collection}/{docId} {
        allow read, write: if isInChurch() || hasCrossTenantAccessToChurch(churchId) || isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY
      }
    }

    // Root-level special collections
    match /campuses/{campusId} {
      allow read, write: if isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY
    }

    match /ministryAccessRequests/{requestId} {
      allow read, write: if isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY
    }

    match /superAdminNotifications/{notificationId} {
      allow read, write: if isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY
    }

    // Root-level: Admin invites and cross-tenant links
    match /{rootCollection}/{docId} {
      // Read access
      allow read: if request.auth != null && (
        (rootCollection == 'adminInvites' && (
          resource.data.invitedUserId == request.auth.uid ||
          resource.data.createdBy == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantAccessLinks' && (
          resource.data.viewerUid == request.auth.uid ||
          resource.data.ownerUid == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantInvites' && (
          resource.data.fromAdminUid == request.auth.uid ||
          resource.data.toAdminUid == request.auth.uid
        )) ||
        isSuperAdmin()
      ) || isDevSuperAdminAccess(); // DEV ONLY

      // Create access
      allow create: if request.auth != null && (
        (rootCollection == 'adminInvites' &&
          request.resource.data.createdBy == request.auth.uid) ||
        (rootCollection == 'crossTenantAccessLinks' &&
          request.resource.data.viewerUid == request.auth.uid) ||
        (rootCollection == 'crossTenantInvites' &&
          request.resource.data.fromAdminUid == request.auth.uid) ||
        isSuperAdmin()
      ) || isDevSuperAdminAccess(); // DEV ONLY

      // Update/Delete access
      allow update, delete: if request.auth != null && (
        (rootCollection == 'adminInvites' && (
          resource.data.invitedUserId == request.auth.uid ||
          resource.data.createdBy == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantAccessLinks' && (
          resource.data.viewerUid == request.auth.uid ||
          resource.data.ownerUid == request.auth.uid
        )) ||
        (rootCollection == 'crossTenantInvites' && (
          resource.data.fromAdminUid == request.auth.uid ||
          resource.data.toAdminUid == request.auth.uid
        )) ||
        isSuperAdmin()
      ) || isDevSuperAdminAccess(); // DEV ONLY
    }

    // Dedicated rules for crossTenantAccessIndex to let viewers create their own index doc
    match /crossTenantAccessIndex/{docId} {
      allow read: if request.auth != null && (
        resource.data.viewerUid == request.auth.uid ||
        resource.data.ownerUid == request.auth.uid ||
        isSuperAdmin()
      ) || isDevSuperAdminAccess(); // DEV ONLY
      allow create: if request.auth != null && request.resource.data.viewerUid == request.auth.uid || isSuperAdmin() || isDevSuperAdminAccess(); // DEV ONLY
      allow update, delete: if request.auth != null && (
        resource.data.viewerUid == request.auth.uid ||
        resource.data.ownerUid == request.auth.uid ||
        isSuperAdmin()
      ) || isDevSuperAdminAccess(); // DEV ONLY
    }

  }
}
